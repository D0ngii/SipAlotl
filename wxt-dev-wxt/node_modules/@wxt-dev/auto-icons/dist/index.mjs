import 'wxt';
import { defineWxtModule } from 'wxt/modules';
import { resolve, relative } from 'node:path';
import defu from 'defu';
import sharp from 'sharp';
import { exists, ensureDir } from 'fs-extra';

const index = defineWxtModule({
  name: "@wxt-dev/auto-icons",
  configKey: "autoIcons",
  async setup(wxt, options) {
    const parsedOptions = defu(
      options,
      {
        enabled: true,
        baseIconPath: resolve(wxt.config.srcDir, "assets/icon.png"),
        grayscaleOnDevelopment: true,
        sizes: [128, 48, 32, 16]
      }
    );
    const resolvedPath = resolve(wxt.config.srcDir, parsedOptions.baseIconPath);
    if (!parsedOptions.enabled)
      return wxt.logger.warn(`\`[auto-icons]\` ${this.name} disabled`);
    if (!await exists(resolvedPath)) {
      return wxt.logger.warn(
        `\`[auto-icons]\` Skipping icon generation, no base icon found at ${relative(process.cwd(), resolvedPath)}`
      );
    }
    wxt.hooks.hook("build:manifestGenerated", async (wxt2, manifest) => {
      if (manifest.icons)
        return wxt2.logger.warn(
          "`[auto-icons]` icons property found in manifest, overwriting with auto-generated icons"
        );
      manifest.icons = Object.fromEntries(
        parsedOptions.sizes.map((size) => [size, `icons/${size}.png`])
      );
    });
    wxt.hooks.hook("build:done", async (wxt2, output) => {
      const image = sharp(resolvedPath).png();
      if (wxt2.config.mode === "development" && parsedOptions.grayscaleOnDevelopment) {
        image.grayscale();
      }
      const outputFolder = wxt2.config.outDir;
      for (const size of parsedOptions.sizes) {
        const resized = image.resize(size);
        ensureDir(resolve(outputFolder, "icons"));
        await resized.toFile(resolve(outputFolder, `icons/${size}.png`));
        output.publicAssets.push({
          type: "asset",
          fileName: `icons/${size}.png`
        });
      }
    });
    wxt.hooks.hook("prepare:publicPaths", (wxt2, paths) => {
      for (const size of parsedOptions.sizes) {
        paths.push(`icons/${size}.png`);
      }
    });
  }
});

export { index as default };
